#!/usr/bin/env node

var Getopt = require('node-getopt'),
    httpServer = require('../lib/http-server'),
    portfinder = require('portfinder'),
    colors = require('colors'),
    path = require('path'),
    dummy = null;

// Getopt arguments options
//   '=':   has argument
//   '[=]': has argument but optional
//   '+':   multiple option supported
var getopt = new Getopt([
  ['n', 'nobrowser'     , 'supress automatic browser launch'   ],
  ['v', 'verbosity=NUM' , '0: silent, 1: quiet, 2: verbose [1]'],
  ['p', 'port=NUM'      , 'port to use [80]'                   ],
  ['r', 'noreload'      , 'supress live reload'                ],
  ['c', 'cache=SECONDS' , 'browser cache time (in seconds) [0]'],
  ['i', 'index=FILENAME', 'default index filename [index.html]'],
  ['h', 'help'          , 'display this help'                  ]
]).bindHelp('usage: adhoc [path] [options]\n\n[[OPTIONS]]\n');

// process.argv needs slice(2) for it starts with 'node' and 'script name'
// parseSystem is alias  of parse(process.argv.slice(2))
opt = getopt.parseSystem();

var options = {
    root: path.resolve(opt.argv[0] || '.'),
    port: parseInt(opt.options.port || 80),
    livereload: !(opt.options.noreload || false),
    launchBrowser: !(opt.options.nobrowser || false),
    verbosity: parseInt(opt.options.verbosity),
    maxAge: parseInt(opt.options.cache * 1000) || 0,
    index: opt.options.index || 'index.html'
}

if (isNaN(options.verbosity)) {
    options.verbosity = 1;
}

portfinder.basePort = options.port;
portfinder.getPort(function (err, port) {
    if (err) throw err;

    if (!options.livereload) {
        listen(port, false);
    } else {
        // Grab another port for live reload
        portfinder.basePort = (port != 35729) ? 35729 : 35730;
        portfinder.getPort(function (err, livereloadPort) {
            if (err) throw err;

            listen(port, livereloadPort);
        });
    }
});

function listen(port, livereloadPort) {
    var server = httpServer.createServer(options, livereloadPort);
    var url = 'http://localhost:' + port.toString() + '/';

    server.listen(port, function() {
        console.log('The adhoc server is now hosting '.yellow
            + server.root.bold.cyan
            + ' at '.yellow
            + url.toString().underline.bold.magenta);

        if (livereloadPort)  {
            // start live reload server
            livereload = require('livereload');
            reloadServer = livereload.createServer({
                port: livereloadPort,
                exts: ['htm', 'html', 'css', 'js', 'json', 'png', 'gif',
                       'php', 'php5', 'py', 'rb', 'erb']
            });
            reloadServer.watch(options.root);
            console.log('Started live reload server on port '.yellow
                + livereloadPort.toString().bold.magenta);
        }

        process.stdout.write('Hit CTRL-C to stop the server');
        if (livereloadPort) {
            process.stdout.write('s');
        }

        // Open the URL if they specify
        if (options.launchBrowser) {
            process.stdout.write(". Launching your default browser...");
            require("openurl").open(url);
        }
        process.stdout.write('\n');
    });
}

if (process.platform !== 'win32') {
    //
    // Signal handlers don't work on Windows.
    //
    process.on('SIGINT', function () {
        log('http-server stopped.'.red);
        process.exit();
    });
}

// vim: filetype=javascript
