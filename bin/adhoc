#!/usr/bin/env node

var Getopt = require('node-getopt'),
    httpServer = require('../lib/http-server'),
    getPort = require('get-port'),
    colors = require('colors'),
    path = require('path'),
    dummy = null;

require('longjohn');

// Getopt arguments options
//   '=':   has argument
//   '[=]': has argument but optional
//   '+':   multiple option supported
var getopt = new Getopt([
  ['b', 'nobrowser'     , 'supress automatic browser launch'   ],
  ['v', 'verbosity=NUM' , 'server log level 0 to 4             [default: 3]'],
  ['p', 'port=NUM'      , 'port to use [80]'                   ],
  ['r', 'noreload'      , 'supress live reload'                ],
  ['c', 'nocolors'      , 'supress colors'                     ],
  ['t', 'ttl=SECONDS'   , 'browser cache time (in seconds)     [default: 0]'],
  ['i', 'index=FILENAME', 'default index filename              [default: index.html]'],
  ['h', 'help'          , 'display this help'                  ]
]).bindHelp('usage: adhoc [options] [path]\n\n[[OPTIONS]]\n');

// process.argv needs slice(2) for it starts with 'node' and 'script name'
// parseSystem is alias  of parse(process.argv.slice(2))
opt = getopt.parseSystem();

var options = {
    root: path.resolve(opt.argv[0] || '.'),
    port: parseInt(opt.options.port || 80),
    livereload: !(opt.options.noreload || false),
    colors: !(opt.options.nocolors || false),
    launchBrowser: !(opt.options.nobrowser || false),
    verbosity: parseInt(opt.options.verbosity),
    maxAge: parseInt(opt.options.ttl * 1000) || 0,
    index: opt.options.index || 'index.html'
}

if (isNaN(options.verbosity)) {
    options.verbosity = 3;
}

if (!options.colors) {
    colors.mode = 'none'
}

getPort({port: options.port}).then(function(port) {
    if (!options.livereload) {
        listen(port, false);
    } else {
        // Grab another port for live reload
        getPort({port: (port != 35729) ? 35729 : 35730}).then(function (livereloadPort) {
            listen(port, livereloadPort);
        });
    }
});

function listen(port, livereloadPort) {
    var server = httpServer.createServer(options, livereloadPort);
    var url = 'http://localhost:' + port.toString();

    server.listen(port, function() {
        console.log('The adhoc server is now hosting '.yellow
            + server.root.bold.green
            + ' at '.yellow
            + url.toString().underline.bold.cyan);

        if (livereloadPort)  {
            // start live reload server
            livereload = require('livereload');
            reloadServer = livereload.createServer({
                port: livereloadPort,
                exts: ['htm', 'html', 'css', 'js', 'json', 'png', 'gif',
                       'php', 'php5', 'py', 'rb', 'erb', 'md']
            });
            reloadServer.watch(options.root);
            console.log('Started live reload server on port '.yellow
                + livereloadPort.toString().bold.yellow);
        }

        process.stdout.write('Hit CTRL-C to stop the server');
        if (livereloadPort) {
            process.stdout.write('s');
        }

        // Open the URL if they specify
        if (options.launchBrowser) {
            process.stdout.write(". Launching your default browser...");
            require("openurl").open(url, function (error) {
                if (error) {
                    var msg = 'The browser could not be started! ' + error;
                    console.error(msg.red);
                }
            });
        }
        process.stdout.write('\n');
    });
}

// https://stackoverflow.com/a/14861513/117030
if (process.platform === "win32") {
  var rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.on("SIGINT", function () {
    process.emit("SIGINT");
  });
}

process.on("SIGINT", function () {
  //graceful shutdown
  console.error('\nadhoc web server stopped.'.blue);
  process.exit();
});

/**/
process.on('uncaughtException', function (err) {
  console.error(err.stack);
  console.error("Node NOT Exiting...");
});
/**/

// vim: filetype=javascript
